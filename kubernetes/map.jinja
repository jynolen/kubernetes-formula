# -*- coding: utf-8 -*-
# vim: ft=jinja

{%- set tplroot = tpldir.split('/')[0] %}
{%- import_yaml tplroot ~ "/defaults.yaml" as default_settings %}
{%- import_yaml tplroot ~ "/osfamilymap.yaml" as osfamilymap %}
{%- import_yaml tplroot ~ "/osfingermap.yaml" as osfingermap %}
{%- import_yaml tplroot ~ "/osmap.yaml" as osmap %}
{%- import_yaml tplroot ~ "/osarchmap.yaml" as osarchmap %}
{%- import_yaml tplroot ~ "/cpuarchmap.yaml" as cpuarchmap %}

{%- set _config = salt['config.get'](tplroot, default={}) %}
{%- set defaults = salt['grains.filter_by'](
      default_settings,
      default=tplroot,
      merge=salt['grains.filter_by']( osfamilymap, grain='os_family',
        merge=salt['grains.filter_by']( osmap, grain='os',
          merge=salt['grains.filter_by']( osfingermap, grain='osfinger',
            merge=salt['grains.filter_by']( osarchmap, grain='osarch',
              merge=salt['grains.filter_by']( cpuarchmap, grain='cpuarch',
                merge=salt['grains.filter_by']( _config, default='lookup'
                )
              )
            )
          )
        )
      )
    )
 %}
{%- set d = salt['grains.filter_by']( {'defaults': defaults}, default='defaults', merge=_config) %}

{%- for c in d.supported %}
    {%- set path = d.dir.base %}
    {%- set url = False %}
    {%- set list = ('client', 'server', 'node', 'k3s', 'crimgr') %}
    {%- if c in list and c in d and d[c] and 'pkg' in d[c] and 'version' in d[c] %}
        {%- set p = d[c]['pkg'] %}

        {%- if grains.os in ('Windows',) %}
            {%- do p.update({ 'path': '%s%sbin%s'|format(d.dir.base, d.div, d.div) }) %}
        {%- endif %}

        {%- if p.use_upstream == 'archive' %}
            {%- if grains.os != 'Windows' %}
                {%- do p.update({ 'path': '%sk8s-%s-%s%s'|format(d.dir.base, c, d[c]['version'], d.div) }) %}
            {%- endif %}

            {%- if c in ('crimgr',) %}
                {%- do p.update({ 'path': '/usr/local' }) %}
                {%- set arch = 'x86_64' if c in ('crimgr',) and d.arch == 'amd64' else d.arch %}
                {%- set url = '%s/v%s/cri-resource-manager-%s.%s.%s'|format(p.uri_a, d[c]['version'], d[c]['version'], arch, p.suffix) %}
            {%- else %}
            {%- set arch = d.arch %}
                {%- set uri = '%s/v%s/kubernetes-%s-%s'|format(p.uri_a, d[c]['version'], c, grains.kernel|lower) %}
                {%- set url = '%s-%s.%s'|format(uri, arch, p.suffix) %}
            {%- endif %}
            {%- do p.archive.update({ 'name': p.path, 'source': url }) %}

            {%- if 'source_hash' in p.archive and p.archive.source_hash %}
                {%- do p.archive.update({'source_hash': p.archive.source_hash}) %}
            {%- else %}
                {%- do p.archive.update({'source_hash': url ~ '.sha256'}) %}
            {%- endif %}

        {%- elif p.use_upstream == 'binary' %}
            {%- if grains.os not in ('Windows',) %}
                {%- do p.update({ 'path': '%sk8s-%s-%s%sbin%s'|format(path, c, d[c]['version'], d.div, d.div) }) %}
            {%- endif %}
            {%- if c in ('client',) %}
                {%- set url = '%s/%s/bin/%s/%s'|format(p.uri_b, d[c]['version'], grains.kernel|lower, d.arch) %}
            {%- elif c in ('k3s',) %}
                {%- set arch = '' if c in ('k3s',) and d.arch == 'amd64' else '-' ~ d.arch %}
                {%- set url = '%s/%s/%s%s'|format(p.uri_b, d[c]['version'], c, arch) %}
            {%- endif %}
            {% set url=p.binary.get("source", url) %}
            {%- if url %}
                {%- set url = url if 'name' not in p else url + '/' + p.name %}
                {%- do p.binary.update({ 'name': p.path, 'source': url }) %}

                {%- if 'source_hash' in p.binary and p.binary.source_hash %}
                    {%- do p.binary.update({'source_hash': p.binary.source_hash}) %}
                {%- else %}
                    {%- do p.binary.update({'source_hash': url ~ '.sha256'}) %}
                {%- endif %}
            {%- endif %}

        {%- elif p.use_upstream == 'script' %}
            {%- do p.update({ 'path': '%sk8s-%s-%s%s'|format(d.dir.base, c, d[c]['version'], d.div) }) %}

            {%- if grains.os not in ('Windows',) %}
                {%- do p.update({ 'path': '%sk8s-%s-%s%sbin%s'|format(path, c, d[c]['version'], d.div, d.div) }) %}
            {%- endif %}

            {%- if c in ('k3s',) %}
                {%- set arch = '' if c in ('k3s',) and d.arch == 'amd64' else d.arch %}
                {%- set uri = '%s/v%s/%s-%s'|format(p.uri_s, d[c]['version'], c, grains.kernel|lower) %}
                {%- set url = '%s-%s'|format(uri, arch) %}
            {%- endif %}
            {% set url=p.script.get("source", url) %}
            {%- if url %}
                {%- do p.script.update({ 'name': p.path, 'source': url }) %}
                {%- set url = url if 'name' not in p else url + '/' + p.name %}

                {%- if 'source_hash' in p.script and p.script.source_hash %}
                    {%- do p.script.update({'source_hash': p.script.source_hash}) %}
                {%- else %}
                    {%- do p.script.update({'source_hash': '%s/%s'|format(p.uri_s, 'sha256') }) %}
                {%- endif %}
            {%- endif %}
        {%- endif %}

        ## Persistance
        {%- do d[c].update({ 'pkg': p }) %}
    {%- endif %}

    ## OPERATOR
    {%- set list = ('operator',) %}
    {%- if c in list and c in d and d[c] and 'wanted' in d[c] and d[c]['wanted'] %}
        {%- for i in d[c]['wanted'] %}

            ## SDK
            {%- set list = ('sdk',) %}
            {%- if i in list and i in d[c] and d[c][i] and 'wanted' in d[c][i] and d[c][i]['wanted'] %}
                {%- for j in d[c][i]['wanted'] %}
                    {%- set url = False %}
                    {%- if 'pkg' in d[c][i] and j in d[c][i]['pkg'] and d[c][i]['pkg'][j] %}
                        {%- set p = d[c][i]['pkg'][j] %}

                        {%- if grains.os in ('Windows',) %}
                            {%- do p.update({ 'path': '%s%sbin%s'|format(d.dir.base, d.div, d.div) }) %}
                        {%- endif %}

                        {%- if p.use_upstream == 'binary' %}
                            {%- if grains.os not in ('Windows',) %}
                                {%- do p.update({ 'path': '%sk8s-%s-%s-%s-%s%sbin%s'|format(path, c, i, j, p.version, d.div, d.div) }) %}
                            {%- endif %}

                            {%- if j in ('ansible-operator', 'helm-operator', 'operator-sdk') %}
                                {%- set kernel = 'apple-darwin' if grains.kernel|lower == 'darwin' else grains.kernel %}
                                {%- set kernel = 'linux-gnu' if grains.kernel|lower == 'linux' else grains.kernel %}
                                {%- set arch = 'x86_64' if d.arch|lower == 'amd64' else d.arch %}
                                {%- set uri = '%s/v%s/%s-v%s'|format(p.uri_b, p.version, j, p.version) %}
                                {%- set url = '%s-%s-%s'|format(uri, arch, kernel) %}
                            {%- endif %}
                            {% set url=p.binary.get("source", url) %}
                            {%- if url %}
                                {%- do p.binary.update({ 'name': p.path, 'source': url }) %}

                                {%- if 'source_hash' in p.binary and p.binary.source_hash %}
                                    {%- do p.binary.update({ 'source_hash': p.binary.source_hash}) %}
                                {%- else %}
                                    {%- do p.binary.update({ 'source_hash': url ~ '.asc'}) %}
                                {%- endif %}
                            {%- endif %}
                        {%- endif %}

                        ## Persistance
                        {%- do d[c][i].update({ j: p }) %}
                    {%- endif %}
                {%- endfor %}
            {%- endif %}
        {%- endfor %}
    {%- endif %}

    ## SIGS / DEVTOOLS / DEVLIBS / OPERATORS ##
    {%- set path = d.dir.source if c in ('devlibs', 'operators') else d.dir.base %}
    {%- set list = ('devlibs', 'operators', 'sigs', 'devtools') %}

    {%- if c in list and c in d and d[c] and 'pkg' in d[c] and d[c]['pkg'] %}
        {%- for i in d[c]['wanted'] %}
            {%- set url = False %}
            {%- if 'pkg' in d[c] and i in d[c]['pkg'] and 'version' in d[c]['pkg'][i] %}
                {%- set p = d[c]['pkg'][i] %}

                {%- if grains.os in ('Windows',) %}
                    {%- do p.update({ 'path': '%s%sbin%s'|format(d.dir.base, d.div, d.div) }) %}
                {%- endif %}

                {%- if p.use_upstream == 'archive' %}
                    {%- if i in ('krew',) %}
                        {%- set url = '%s/v%s/%s.%s'|format(p.uri_a, p.version, i, p.suffix) %}

                    {%- elif i in ('audit2rbac',) %}
                        {%- set uri = '%s/v%s/%s-%s'|format(p.uri_a, p.version, i, grains.kernel|lower) %}
                        {%- set url = '%s-%s.%s'|format(uri, d.arch, p.suffix) %}

                    {%- elif i in ('cue',) %}
                        {%- set arch = d.arch %}
                        {%- set uri = '%s/%s/%s_%s'|format(p.uri_a, p.version, i, p.version) %}
                        {%- set url = '%s_%s_%s.%s'|format(uri, grains.kernel|lower, arch, p.suffix) %}

                    {%- elif i in ('dive',) %}
                        {%- set arch = d.arch %}
                        {%- set kernel = 'Windows' if grains.kernel == 'Windows' else grains.kernel|lower %}
                        {%- set uri = '%s/v%s/%s_%s'|format(p.uri_a, p.version, i, p.version) %}
                        {%- set url = '%s_%s_%s.%s'|format(uri, kernel, arch, p.suffix) %}

                    {%- elif i in ('kubectx', 'kubens',) %}
                        {%- set arch = 'x86_64' if d.arch in ('x86_64', 'amd64') else d.arch %}
                        {%- set uri = '%s/v%s/%s_v%s'|format(p.uri_a, p.version, i, p.version) %}
                        {%- set url = '%s_%s_%s.%s'|format(uri, grains.kernel|lower, arch, p.suffix) %}

                    {%- elif i in ('stern',) %}
                        {%- set arch = 'amd64' if i in ('stern',) and d.arch == 'x86_64' else d.arch %}
                        {%- set url = '%s/%s/%s_%s_%s'|format(p.uri_a, p.version, i, grains.kernel, arch) %}

                    {%- elif i in ('istio',) %}
                        {%- set kernel = 'osx' if grains.kernel == 'Darwin' else grains.kernel|lower %}
                        {%- set kernel = 'win' if kernel|lower == 'windows' else kernel %}
                        {%- set arch = '-' ~ d.arch if 'arch' not in p else p.arch %}
                        {%- set uri = '%s/%s/%s-%s'|format(p.uri_a, p.version, i, p.version) %}
                        {%- set url = '%s-%s%s.%s'|format(uri, kernel, arch, p.suffix) %}

                    {%- elif i in ('octant',) %}
                        {%- set kernel = 'macOS' if grains.kernel == 'Darwin' else grains.kernel %}
                        {%- set arch = '64bit' if d.arch in ('x86_64', 'amd64') else d.arch %}
                        {%- set arch = 'arm' if d.arch|lower in ('arm',) else arch %}
                        {%- set arch = 'arm64' if d.arch|lower in ('arm64',) else arch %}
                        {%- set uri = '%s/v%s/%s_%s'|format(p.uri_a, p.version, i, p.version) %}
                        {%- set url = '%s_%s-%s.%s'|format(uri, kernel, arch, p.suffix) %}

                    {%- elif i in ('java', 'python', 'csharp', 'javascript',) %}
                        {%- set url = '%s/%s/archive/%s%s.tar.gz'|format(p.uri_a, i, p.name, p.version) %}

                    {%- elif c in ('operators',) %}
                        {%- set name = 'v' if 'name' not in p else p.name %}
                        {%- set url = '%s/%s%s.%s'|format(p.uri_a, name, p.version, p.suffix) %}

                    {%- else %}
                        {%- set url = '%s/%s%s.%s'|format(p.uri_a, p.name, p.version, p.suffix) %}
                    {%- endif %}

                    {# PATH #}
                    {%- if grains.os != 'Windows' %}
                        {%- do p.update({ 'path': '%sk8s-%s-%s-%s%s'|format(path, c, i, p.version, d.div) }) %}
                        {%- if i in ('audit2rbac', 'cue', 'dive', 'istio', 'kubens', 'kubectx', 'octant', 'krew') %}
                            {%- do p.update({ 'path': '%s%sbin%s'|format(p.path, d.div, d.div) }) %}
                        {%- endif %}
                    {%- endif %}
                    {%- set url=p.archive.get("source", url) -%}
                    {%- if url %}
                        {%- do p.archive.update({ 'name': p.path, 'source': url }) %}
                        {%- if 'source_hash' in p.archive and p.archive.source_hash %}
                            {%- do p.archive.update({'source_hash': p.archive.source_hash}) %}
                        {%- else %}
                            {%- do p.archive.update({'source_hash': url ~ '.sha256'}) %}
                        {%- endif %}
                    {%- endif %}

                {%- elif p.use_upstream == 'binary' %}
                    {%- if grains.os not in ('Windows',) %}
                        {%- do p.update({ 'path': '%sk8s-%s-%s-%s%sbin%s'|format(path, c, i, p.version, d.div, d.div) }) %}
                    {%- endif %}

                    {%- if i in ('kudo',) %}
                        {%- set arch = 'x86_64' if d.arch == 'amd64' else d.arch %}
                        {%- set uri = '%s/v%s/kubectl-%s_%s'|format(p.uri_b, p.version, i, p.version) %}
                        {%- set url = '%s_%s_%s'|format(uri, grains.kernel|lower, arch) %}

                    {%- elif i in ('kind',) %}
                        {%- set uri = '%s/v%s/%s-%s'|format(p.uri_b, p.version, i, grains.kernel|lower) %}
                        {%- set url = '%s-%s'|format(uri, d.arch) %}

                    {%- elif i in ('krew',) %}
                        {%- set url = '%s/v%s/%s.%s'|format(p.uri_b, p.version, i, p.suffix) %}

                    {%- elif i in ('minikube', 'devspace', 'skaffold', 'k3s') %}
                        {%- set kernel = '' if i in ('k3s',) else '-' ~ grains.kernel|lower %}
                        {%- set arch = '' if i in ('k3s',) and d.arch == 'amd64' else '-' ~ d.arch %}
                        {%- set suffix = '.' ~ p.suffix if p.suffix else '' %}
                        {%- set url = '%s/v%s/%s-%s%s%s'|format(p.uri_b, p.version, i, grains.kernel|lower, arch, suffix) %}

                    {%- elif i in ('kubebuilder',) %}
                        {%- set url = '%s/v%s/%s_%s_%s'|format(p.uri_a, p.version, i, grains.kernel|lower, d.arch) %}

                    {%- elif i in ('stern',) %}
                        {%- set suffix = '.' ~ p.suffix if p.suffix else '' %}
                        {%- set arch = 'amd64' if i in ('stern',) and d.arch == 'x86_64' else d.arch %}
                        {%- set url = '%s/%s/%s_%s_%s%s'|format(p.uri_b, p.version, i, grains.kernel, arch, suffix) %}

                    {%- elif i in ('linkerd2',) %}
                        {%- set arch = '' if grains.kernel|lower != 'linux' else '-' ~ d.arch %}
                        {%- set suffix = '.' ~ p.suffix if p.suffix else '' %}
                        {%- set uri = '%s/edge-%s/linkerd2-cli-edge'|format(p.uri_b, p.version) %}
                        {%- set url = '%s-%s-%s%s%s'|format(uri, p.version, grains.kernel|lower, arch, suffix) %}
                    {%- endif %}
                    {%- set url=p.binary.get("source", url) -%}
                    {%- if url %}
                        {%- do p.binary.update({ 'name': p.path, 'source': url }) %}

                        {%- if 'source_hash' in p.binary and p.binary.source_hash %}
                            {%- do p.binary.update({'source_hash': p.binary.source_hash}) %}
                        {%- else %}
                            {%- do p.binary.update({'source_hash': url ~ '.sha256'}) %}
                        {%- endif %}
                    {%- endif %}
                {%- endif %}

                ## Persistance
                {%- do d[c].update({ i: p }) %}
            {%- endif %}
        {%- endfor %}
    {%- endif %}
{%- endfor %}

{%- if 'formula' not in d %}
    {%- do d.update({'formula': 'kubernetes'}) %}
{%- endif %}
{%- set data = d %}
